### Problem with previous design 
The one-server architecture had an availability issue: if the server goes down for any reason, the entire system goes down. This is a single point of failure (SPOF).

The one-server architecture also had a reliability issue: if the server receives too many requests for the amount of resources it has, it is overloaded and the quality of the system degrades.

In both cases, the solution is to distribute the web infrastructure across multiple servers. This is a high-availability architecture. It is more expensive and complex, but it is also more reliable and scalable.

## Load Balancer
By adding a software load balancer and one more server to the design, we can handle a larger load and have a failover in case one server goes down. It is still possible to overload the system, but it is less likely.

### Location of the server
In this design, I assume the HAProxy load balancer is not on the same server as any of the web servers. It sits on its own hardware. If it was on web server hardware, the failure of the web server's hardware would also take down the load balancer, which would defeat the purpose of having a load balancer.

### Distribution Algorithm
A simple distribution is round robin, which is the default for HAProxy. This means that the load balancer sends each new request to the next server in the circular list. 

Another option is to use least connections, which sends the request to the server with the fewest active connections. 

However, if there are session persistence requirements, such as caching user data, the load balancer can use a hash of the user's IP address to send all requests from the same user to the same server. Distributing according to the source of the request is called sticky sessions.

### Resource utilisation
The load balancer can create an active-active or active-passive failover setup. In an active-active setup, all servers are active and the load balancer distributes requests to all of them. In an active-passive setup, only one server is active and the load balancer sends all requests to it. If the active server goes down, the load balancer sends all requests to the passive server.

I prefer the active-active setup because it maximises utilisation of resources; if maintenance is required on once server, it can be taken out of the rotation until healthy again.

### Primary-Replica db clusters
The database server is a single point of failure in this design. To address this, we can create a primary-replica cluster. The primary database server is the master, and the replica database server is the slave. The primary server is the only one that the application can write to, and the replica server is read-only. The primary server replicates its data to the replica server. If the primary server goes down, the replica server can be promoted to primary.

## Issues with the design

### SPOF
Although the design is more available and reliable than the single server design, it still has a single point of failure: the load balancer.

If the database server is external to the web servers, the database server is also a single point of failure.

### Security issues

#### Firewall
There is no firewall. This means traffic is unfiltered - regardless of its nature or origin, it will reach our servers. Malicious traffic such as DoS attacks cannot be blocked.

The network cannot be segmented into public and private. Currently, the database server is accessible from the internet. This is a security risk.

Ports are not restricted.

It is difficult to enforce policies about who, what and where.

There is no intrusion detection without a firewall.

#### HTTPS
The information sent from client to server is not encrpyted. This is a security risk:
- Man in the middle attacks are possible.
- data tampering
- data eavesdropping 

#### No monitoring
If the system is not monitored, usage patterns and performance trends cannot be used to make future architecture decisions.

If the system is not monitored, it is difficult to detect and respond to security threats.

If the system is not monitored, it is difficult to detect and respond to incidents.